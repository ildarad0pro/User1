Окно авторизации:
    Title="Авторизация" Height="450" Width="800" MinHeight="450" MinWidth="800" MaxHeight="450" MaxWidth="800">
    <Grid>
        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Label Content="Авторизация" FontSize="30" Width="auto" FontWeight="Bold" HorizontalAlignment="Center"/>
            <StackPanel Orientation="Horizontal">
                <Label Content="Логин"/>
                <TextBox x:Name="login" PreviewTextInput="Text_PreviewTextInput"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Пароль"/>
                <TextBox x:Name="password" PreviewTextInput="Text_PreviewTextInput"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <Button Content="Регистрация" Click="Reg_Click" Margin="0 15 0 0"/>
                <Button Content="Войти" Click="Auth_Click" Margin="15 15 0 0"/>
            </StackPanel>
        </StackPanel>
    </Grid>

Код для авторизации:
	public TestBDEntities db = new TestBDEntities();
	private void Reg_Click(object sender, RoutedEventArgs e)
        {
            Registration registration = new Registration();
            registration.Show();
            this.Close();
        }

        private void Auth_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(login.Text) || string.IsNullOrWhiteSpace(password.Text))
                {
                    MessageBox.Show("Все поля должны быть заполнены", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                var user = db.Users.Where(x => x.login.Equals(login.Text) && x.password.Equals(password.Text)).FirstOrDefault();
                if (user != null)
                {
                    var roleId = user.Roles.FirstOrDefault()?.id;
                    if (roleId.HasValue)
                    {
                        AuthUser.idAuthUser = user.id;
                        switch (roleId.Value)
                        {
                            case 1:
                                MessageBox.Show("Вы вошли под учетной записью пользователя", "Успешно", MessageBoxButton.OK, MessageBoxImage.Information);
                                User user1 = new User();
                                user1.Show();
                                this.Close();
                                break;
                            case 2:
                                MessageBox.Show("Вы вошли под учетной записью администратора", "Успешно", MessageBoxButton.OK, MessageBoxImage.Information);
                                Admin admin = new Admin();
                                admin.Show();
                                this.Close();
                                break;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Такого пользователя не существует", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public string AuthorizationTest(string login, string  password)
        {
            if (string.IsNullOrWhiteSpace(login) || string.IsNullOrWhiteSpace(password))
            {
                return "Все поля должны быть заполнены";
            }
            var user = db.Users.Where(x => x.login.Equals(login) && x.password.Equals(password)).FirstOrDefault();
            if (user != null)
            {
                var roleId = user.Roles.FirstOrDefault()?.id;
                if (roleId.HasValue)
                {
                    AuthUser.idAuthUser = user.id;
                    switch (roleId.Value)
                    {
                        case 1:
                            return "Вы вошли под учетной записью пользователя";
                        case 2:
                            return "Вы вошли под учетной записью администратора";
                        default:
                            return "Ошибка";
                    }
                }
                else
                {
                    return "Ошибка";
                }
            }
            else
            {
                return "Такого пользователя не существует";
            }
        }

        private void Text_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox.Text.Length >= 20)
            {
                e.Handled = true;
            }
        }

Класс для сохранения пользователя AuthUser.cs:
    internal class AuthUser
    {
        public static int idAuthUser;
    }

Окно с выводом данных:
        Title="Окно администратора" Height="450" Width="800" MinHeight="400" MinWidth="700" MaxHeight="500" MaxWidth="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1.5*"/>
            <RowDefinition Height="8.5*"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                <Image x:Name="photo" Margin="5 0" Width="60" Height="60"/>
                <Label x:Name="fio" Width="auto"/>
            </StackPanel>
            <Button Content="Выйти" HorizontalAlignment="Right" Click="Button_Click"/>
        </Grid>
        <Grid Grid.Row="1">
            <TabControl>
                <TabItem Header="Пользователи">
                    <ListView x:Name="listView" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="id" DisplayMemberBinding="{Binding Id}"/>
                                <GridViewColumn Header="Логин" DisplayMemberBinding="{Binding Login}"/>
                                <GridViewColumn Header="Пароль" DisplayMemberBinding="{Binding Password}"/>
                                <GridViewColumn Header="Фамилия" DisplayMemberBinding="{Binding FirstName}"/>
                                <GridViewColumn Header="Имя" DisplayMemberBinding="{Binding SecondName}"/>
                                <GridViewColumn Header="Отчество" DisplayMemberBinding="{Binding ThirdName}"/>
                                <GridViewColumn Header="Телефон" DisplayMemberBinding="{Binding Phone}"/>
                                <GridViewColumn Header="Дата рождения" DisplayMemberBinding="{Binding DateBirth}"/>
                                <GridViewColumn Header="Роль" DisplayMemberBinding="{Binding RoleName}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </TabItem>
                <TabItem Header="...">
                    
                </TabItem>
                <TabItem Header="...">

                </TabItem>
            </TabControl>
        </Grid>
    </Grid>

Код для вывода данных:
	public TestBDEntities db = new TestBDEntities();
        public Admin()
        {
            InitializeComponent();
            try
            {
                var user = db.Users.Where(x => x.id == AuthUser.idAuthUser).FirstOrDefault();
                fio.Content = user.firstname + " " + user.secondname + " " + user.thirdname;

                var users = (from u in db.Users.ToList()
                             let r = u.Roles.FirstOrDefault()
                             let p = u.Roles.FirstOrDefault()
                             select new
                             {
                                 Id = u.id,
                                 Login = u.login,
                                 Password = u.password,
                                 FirstName = u.firstname,
                                 SecondName = u.secondname,
                                 ThirdName = u.thirdname,
                                 Phone = u.phone.ToString("F0"),
                                 DateBirth = u.dateBirth.ToString("dd.MM.yyyy"),
                                 RoleName = r != null ? r.name ?? "Н/Д" : "Н/Д",
                             }).ToList();
                listView.ItemsSource = users;


                string basePath = @"D:\4 курс\пробник демка\User01\2\WpfApp1\WpfApp1\Resources";
                string imagePath = System.IO.Path.Combine(basePath, $"foto{user.id}.jpg");
                BitmapImage bitmap = new BitmapImage();
                bitmap.BeginInit();
                bitmap.UriSource = new Uri(imagePath, UriKind.Absolute);
                bitmap.CacheOption = BitmapCacheOption.OnLoad;
                bitmap.EndInit();
                photo.Source = bitmap;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Authorization authorization = new Authorization();
            authorization.Show();
            this.Close();
        }

Класс теста:
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            Authorization authorization = new Authorization();
            var actual = authorization.AuthorizationTest("1516", "1");
            var expected = "Такого пользователя не существует";
            Assert.AreEqual(expected, actual);
        }
    }

Стили:
<Application x:Class="WpfApp1.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WpfApp1"
             StartupUri="Pages/Authorization.xaml">
    <Application.Resources>
        <Style TargetType="Label">
            <Setter Property="FontSize" Value="22"/>
            <Setter Property="Width" Value="170"/>
            <Setter Property="Margin" Value="5 10"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Width" Value="215"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Margin" Value="5 10"/>
        </Style>
        <Style TargetType="DatePicker">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Width" Value="215"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Margin" Value="5 10"/>
        </Style>
        <Style TargetType="Button">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="Height" Value="35"/>
            <Setter Property="Margin" Value="5 0"/>
        </Style>
    </Application.Resources>
</Application>

QR КОД:
XAML:
<Image x:Name="im" Width="100" Height="100"/>
CS:
                var imageFormat = (BarCodeImageFormat)Enum.Parse(typeof(BarCodeImageFormat), "Png");
                string url = "https://docs.google.com/document/d/1Lu0xaaxS_e_jSa1kSHF7uljmULlsWIIT/edit";
                BarcodeGenerator generator = new BarcodeGenerator(EncodeTypes.QR, url);
                generator.Parameters.Barcode.XDimension.Pixels = 4;
                generator.Save("QR.Png", imageFormat);
                Uri fileUri = new Uri(System.IO.Path.GetFullPath("QR.Png"));
                im.Source = new BitmapImage(fileUri);

Капча:
XAML:
xmlns:easy="clr-namespace:EasyCaptcha.Wpf;assembly=EasyCaptcha.Wpf"
<easy:Captcha Margin="5"  Height="50" x:Name="MyCap"/>
CS:
	public enum LetterOption
        {
            Number,
            Alphabet,
            Alphanumeric,
        }
        public string answer;
        public Authorization()
        {
            InitializeComponent();
            MyCap.CreateCaptcha(EasyCaptcha.Wpf.Captcha.LetterOption.Alphanumeric, 4);
            answer = MyCap.CaptchaText;
Для проверки на правильность кода:
if (code.Text.Equals(answer))
{